from app.handlers.router import admin_router as router
import logging
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
import asyncio

from aiogram.types import InputFile

from app.keyboards import inline_admin as inline_keyboards

from app.states.states import Post, Category, Send, File

from aiogram.types import BufferedInputFile


from app.keyboards.inline_admin import get_catalogue, get_posts

from app.filters.IsAdmin import IsAdmin

from app.requests.user.login import login
from app.requests.helpers.get_cat_error import get_cat_error_async
from app.requests.get.get_categories import get_categories
from app.requests.get.get_post import get_post
from app.requests.post.postPhotos import post_photos
from app.requests.helpers.get_cat_error import get_cat_error_async

from app.requests.post.postCategory import post_category
from app.requests.post.postPost import post_post
from app.requests.put.putCategory import put_category
from app.requests.put.putPost import put_post
from app.requests.delete.deleteCategory import delete_category
from app.requests.delete.deletePost import delete_post
from app.requests.user.get_alive import get_alive
from app.requests.user.make_admin import make_admin

from app.requests.files.get_report import get_report
from app.requests.files.put_report import put_report
from app.requests.files.replace_report import replace_report
#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================


@router.message(CommandStart(), IsAdmin())
async def cmd_start_admin(message: Message, state: FSMContext):
    data = await login(telegram_id=message.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω! üëã")
    await message.answer("–Ø –±–æ—Ç Oceanica. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö")
    await message.answer("–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–∞–∫ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    await message.answer("–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª—ã–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await state.clear()


@router.callback_query(F.data == "restart", IsAdmin())
async def callback_start_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëã")
    await callback.message.answer("–Ø –±–æ—Ç Oceanica. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()


@router.message(Command("help"), IsAdmin())
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Ä—ã–±—É –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π \n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–∏–¥—ã —Ä—ã–±—ã –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏:\n\n—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n@dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)

@router.message(Command("contacts"), IsAdmin())
async def cmd_contacts(message: Message):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts", IsAdmin())
async def contacts_callback(callback: CallbackQuery):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu", IsAdmin())
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# –ö–∞—Ç–∞–ª–æ–≥
#===========================================================================================================================
@router.callback_query(F.data == "catalogue", IsAdmin())
async def catalogue_callback_admin(callback: CallbackQuery):
    categories = await get_categories(telegram_id= callback.from_user.id)
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üëá", reply_markup= await get_catalogue(categories= categories, telegram_id=callback.from_user.id))
    await callback.answer()


@router.callback_query(F.data.startswith("category_"), IsAdmin())
async def category_catalogue_callback_admin(callback: CallbackQuery):
    await callback.answer()
    category_id = callback.data.split("_")[1]
    categories = await get_categories(telegram_id= callback.from_user.id)
    print(category_id)
    current_category = None
    if categories is not None:
        for category in categories:
            if str(category.get("id")) == str(category_id):
                current_category = category
                break
    
    if current_category is None or current_category.get("posts") is None or current_category.get("posts") == []:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup= await get_posts(posts=current_category.get("posts"), category=current_category ))
        await callback.answer()
        return
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüëá", reply_markup= await get_posts(category= current_category ,posts = current_category.get("posts", [])))


@router.callback_query(F.data.startswith("post_"), IsAdmin())
async def post_catalogue_callback_admin(callback: CallbackQuery):
    await callback.answer()
    post_id = callback.data.split("_")[2]
    category_id = callback.data.split("_")[1]
    post_data = await get_post(
        telegram_id=callback.from_user.id,
        post_id = post_id,
        category_id = category_id
    )
    if post_data is None or not post_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∑–∏—Ü–∏–∏", reply_markup=inline_keyboards.home)
        return
    await send_post_photos(callback = callback, post = post_data)
    message_text = (
        f"üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{post_data.get('title')}`\n\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{post_data.get('description')}`\n\n"
        f"**–ü—Ä–∞–π—Å:** `{post_data.get('price')}`\n\n"
        f"**–°—Ç—Ä–∞–Ω–∞:** `{post_data.get('country')}`\n\n"
        f"**–í–µ—Å:** `{post_data.get('weight')}`\n\n"
    )
    await callback.message.answer(
        text=message_text,
        parse_mode="MarkdownV2",
        reply_markup= await inline_keyboards.get_post_menu(
            category_id= category_id,
            post_id= post_id,
        )
    )
#===========================================================================================================================
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
#===========================================================================================================================


async def send_post_photos(callback: CallbackQuery, post: Dict[str, Any]):
    photo_ids = post.get('photos', [])

    if not photo_ids:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    first_photo_id = photo_ids[0]
    caption_text = f"**{post.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**"
    
    await callback.message.answer_photo(
        photo=first_photo_id,
        caption=caption_text,
        parse_mode="MarkdownV2"
    )

    for photo_id in photo_ids[1:]:
        await callback.message.answer_photo(photo=photo_id)

#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#===========================================================================================================================


@router.callback_query(F.data == "create_category", IsAdmin())
async def category_create_callback_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.set_state(Category.handle_category)
    await callback.answer()

@router.message(Category.handle_category, IsAdmin())
async def category_enter_name_admin(message: Message, state: FSMContext):
    name = (message.text).strip()
    response = await post_category(telegram_id=message.from_user.id, title=name)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=inline_keyboards.main)
        return
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!", reply_markup= await get_catalogue(telegram_id = message.from_user.id))
    await state.clear()


#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
#===========================================================================================================================


@router.callback_query(F.data.startswith("create_post_"), IsAdmin())
async def post_create_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    catergory_id = callback.data.split("_")[2]
    await state.update_data(category = catergory_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await state.set_state(Post.handle_post)


@router.message(Post.handle_post, IsAdmin())
async def post_enter_name_admin(message: Message, state: FSMContext):
    title = (message.text).strip()
    if not title:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø–æ—Å—Ç–∞")
        return
    await state.update_data(title = title)
    await state.set_state(Post.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")


@router.message(Post.title, IsAdmin())
async def post_enter_description_admin(message: Message, state: FSMContext):
    description = (message.text).strip()
    if not description:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
        return
    await state.update_data(description=description)
    await state.set_state(Post.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")


@router.message(Post.description, IsAdmin())
async def post_enter_price_admin(message: Message, state: FSMContext):
    price = (message.text).strip()
    if not price or not price.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–Ω—É")
        return
    await state.update_data(price = price)
    await state.set_state(Post.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")


@router.message(Post.price, IsAdmin())
async def post_enter_country_admin(message: Message, state: FSMContext):
    country = (message.text).strip()
    if not country:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
        return
    await state.update_data(country = country)
    await state.set_state(Post.country)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å")

@router.message(Post.country, IsAdmin())
async def post_enter_quantity_admin(message: Message, state: FSMContext):
    weight = (message.text).strip()
    if not weight or not weight.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    data = await state.get_data()
    post_data = await post_post(
        telegram_id= message.from_user.id,
        category_id= data.get("category"),
        title = data.get("title"),
        description= data.get("description"),
        country= data.get("country"),
        price = data.get("price"),
        weight= weight
    )
    if not post_data:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞", reply_markup=await get_catalogue(telegram_id = message.from_user.id))
        return
    await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    message_text = (
        f"üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{post_data.get('title')}`\n\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{post_data.get('description')}`\n\n"
        f"**–ü—Ä–∞–π—Å:** `{post_data.get('price')}`\n\n"
        f"**–°—Ç—Ä–∞–Ω–∞:** `{post_data.get('country')}`\n\n"
        f"**–í–µ—Å:** `{post_data.get('weight')}`\n\n"
    )
    await message.answer(message_text, reply_markup=await inline_keyboards.get_post_menu(category_id=post_data.get("category"), post_id=post_data.get("id")), parse_mode="MarkdownV2")
    await state.clear()
#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#===========================================================================================================================
@router.callback_query(F.data.startswith("edit_category_"), IsAdmin())
async def category_edit_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    await state.set_state(Category.handle_edit_category)
    await state.update_data(category_id = category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.message(Category.handle_edit_category, IsAdmin())
async def category_edit_name_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    name = (message.text).strip()
    response = await put_category(telegram_id=message.from_user.id, title=name, category_id=category_id)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=inline_keyboards.main)
        return
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=await get_catalogue(telegram_id = message.from_user.id))
    await state.clear()

#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
#===========================================================================================================================


@router.callback_query(F.data.startswith("edit_post_"), IsAdmin())
async def post_edit_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    catergory_id, post_id = callback.data.split("_")[2:]
    await state.update_data(category = catergory_id)
    await state.update_data(post_id = post_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await state.set_state(Post.handle_edit_post)


@router.message(Post.handle_edit_post, IsAdmin())
async def post_edit_name_admin(message: Message, state: FSMContext):
    title = (message.text).strip()
    if not title:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø–æ—Å—Ç–∞")
        return
    await state.update_data(title = title)
    await state.set_state(Post.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")


@router.message(Post.title, IsAdmin())
async def post_edit_description_admin(message: Message, state: FSMContext):
    description = (message.text).strip()
    if not description:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
        return
    await state.update_data(description=description)
    await state.set_state(Post.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")


@router.message(Post.description, IsAdmin())
async def post_edit_price_admin(message: Message, state: FSMContext):
    price = (message.text).strip()
    if not price or not price.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–Ω—É")
        return
    await state.update_data(price = price)
    await state.set_state(Post.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è")


@router.message(Post.price, IsAdmin())
async def post_edit_country_admin(message: Message, state: FSMContext):
    country = (message.text).strip()
    if not country:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
        return
    await state.update_data(country = country)
    await state.set_state(Post.country)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å")


@router.message(Post.country, IsAdmin())
async def post_edit_quantity_admin(message: Message, state: FSMContext):
    weight = (message.text).strip()
    if not weight or not weight.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    data = await state.get_data()
    post_data = await put_post(
        telegram_id= message.from_user.id,
        category_id= data.get("category"),
        title = data.get("title"),
        description= data.get("description"),
        country= data.get("country"),
        price = data.get("price"),
        weight= weight,
        post_id= data.get("post_id"),
    )
    if not post_data:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞", reply_markup= await get_catalogue(telegram_id = message.from_user.id))
        return
    await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    message_text = (
        f"üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{post_data.get('title')}`\n\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{post_data.get('description')}`\n\n"
        f"**–ü—Ä–∞–π—Å:** `{post_data.get('price')}`\n\n"
        f"**–°—Ç—Ä–∞–Ω–∞:** `{post_data.get('country')}`\n\n"
        f"**–í–µ—Å:** `{post_data.get('weight')}`\n\n"
    )
    await message.answer(message_text, reply_markup=await inline_keyboards.get_post_menu(category_id=data.get("category"), post_id=data.get("post_id")), parse_mode="MarkdownV2")
    await state.clear()

#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_category_"), IsAdmin())
async def category_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    response = await delete_category(telegram_id=callback.from_user.id, category_id=category_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=inline_keyboards.main)
        return
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=await get_catalogue(telegram_id = callback.from_user.id))
    await state.clear()


#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_post_"), IsAdmin())
async def post_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    catergory_id, post_id = callback.data.split("_")[2:]
    response = await delete_post(telegram_id=callback.from_user.id, category_id=catergory_id, post_id=post_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç",reply_markup= await get_catalogue(telegram_id = callback.from_user.id))
    await callback.message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",reply_markup=await get_catalogue(telegram_id = callback.from_user.id))
    await state.clear()

#===========================================================================================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
#===========================================================================================================================


@router.callback_query(F.data.startswith("add_photo_"), IsAdmin())
async def post_add_photos_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        post_id = callback.data.split("_")[2]
        await state.update_data(post_id=int(post_id))
    except (IndexError, ValueError):
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞.", reply_markup=await get_catalogue(telegram_id= callback.from_user.id))
        await state.clear()
        return
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    await state.set_state(Post.waiting_for_photos)


@router.message(Post.waiting_for_photos, IsAdmin(), F.photo)
async def handle_photo_upload_admin(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(photo_id)
    await state.update_data(photos=photos)
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@router.message(Post.waiting_for_photos, F.text.lower() == "–≥–æ—Ç–æ–≤–æ", IsAdmin())
async def finish_photo_upload_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    post_id = data.get("post_id")
    photo_ids = data.get("photos", [])
    
    if not photo_ids:
        await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    response = await post_photos(telegram_id= message.from_user.id ,post_id= post_id, photos= photo_ids)
    if response:
        await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ø–æ—Å—Ç—É ID!", reply_markup=await get_catalogue(telegram_id=message.from_user.id))
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
    await state.clear()


#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
#===========================================================================================================================

@router.callback_query(F.data == "send_menu", IsAdmin())
async def send_menu_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Send.handle)
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. "
        "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
    )

@router.message(Send.handle, IsAdmin(), F.photo)
async def send_photo_message(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    caption = message.caption or ""
    await state.update_data(photo=photo, caption=caption)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await start_broadcast(state, message, message.bot)


@router.message(Send.handle, IsAdmin(), F.text)
async def send_text_message(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await start_broadcast(state, message, message.bot)


async def start_broadcast(state: FSMContext, message: Message, bot: Bot):
    data = await state.get_data()
    users_data = await get_alive(telegram_id=message.from_user.id)

    if not users_data:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    tasks = []
    for user in users_data:
        user_id = user.get("telegram_id")
        if "photo" in data:
            tasks.append(
                bot.send_photo(chat_id=user_id, photo=data["photo"], caption=data.get("caption", ""))
            )
        elif "text" in data:
            tasks.append(
                bot.send_message(chat_id=user_id, text=data["text"])
            )

    results = await asyncio.gather(*tasks, return_exceptions=True)

    successful_sends = sum(1 for r in results if not isinstance(r, TelegramAPIError))
    failed_sends = len(results) - successful_sends

    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_sends}\n‚ùå –û—à–∏–±–∫–∏: {failed_sends}",
        reply_markup=inline_keyboards.main
    )
    await state.clear()

#===========================================================================================================================
# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
#===========================================================================================================================


@router.callback_query(F.data.startswith("access_give"), IsAdmin())
async def give_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        if not user_id:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            return
        response = await make_admin(
            telegram_id= callback.from_user.id,
            target_user_id= user_id
        )
        if not response:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
        else:
            logging.info(response)
            await callback.message.answer("–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", reply_markup=inline_keyboards.home)
            await bot.send_message(chat_id=user_id, text="–í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)


@router.callback_query(F.data.startswith("access_reject"), IsAdmin())
async def reject_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)



#===========================================================================================================================
# –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
#===========================================================================================================================


@router.callback_query(F.data == "file_panel", IsAdmin())
async def file_panel_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup= inline_keyboards.file_panel
    )


@router.callback_query(F.data == "get_report", IsAdmin())
async def send_report_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):

    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –≤–∞—à –æ—Ç—á—ë—Ç...", show_alert=False)
    docs = await get_report(telegram_id=callback.from_user.id)

    if not docs:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await callback.message.answer(
        "–í–æ—Ç –≤–∞—à –æ—Ç—á—ë—Ç!"
    )

    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
        reply_markup=inline_keyboards.file_panel
    )
    await state.clear()



@router.callback_query(F.data == "add_posts", IsAdmin())
async def file_add_posts_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.answer(
        "–≠—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    )
    docs = await get_report(telegram_id=callback.from_user.id)
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
    )
    await callback.message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –û—Ç–ø—Ä–∞–≤—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ"
    )
    await state.set_state(File.waiting_for_file)


@router.message(File.waiting_for_file, IsAdmin())
async def upload_add_file_admin(message: Message, state: FSMContext, bot: Bot):
    try:

        file = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        response = await put_report(message.from_user.id, file_bytes)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not response:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É."
            )
            await state.clear()
            return
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", reply_markup= inline_keyboards.file_panel)
        await state.clear()

    except Exception as e:
        await state.clear()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel (.xlsx).", reply_markup= inline_keyboards.file_panel)


@router.callback_query(F.data == "replace_posts", IsAdmin())
async def file_replace_posts_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.answer(
        "–≠—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    )
    docs = await get_report(telegram_id=callback.from_user.id)
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
    )
    await callback.message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –û—Ç–ø—Ä–∞–≤—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ. –ë—É–¥—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã"
    )
    await state.set_state(File.waiting_for_replace_file)


@router.message(File.waiting_for_replace_file, IsAdmin())
async def upload_replace_file_admin(message: Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        response = await replace_report(message.from_user.id, file_bytes)
        if not response:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É."
            )
            await state.clear()
            return
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup= inline_keyboards.file_panel)
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await state.clear()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel (.xlsx).", reply_markup= inline_keyboards.file_panel)
